// automatically generated by bindgen and modified by hand

#![allow(non_camel_case_types)]

pub const BT_FAIL: i32 = -1;
pub const BT_SUCCESS: i32 = 0;

pub const BT_NOOVERWRITE: u32 = 1;
pub const BT_NOSYNC: u32 = 2;
pub const BT_RDONLY: u32 = 4;
pub const BT_REVERSEKEY: u32 = 8;

#[repr(C)] pub struct btree { _private: [u8; 0] }
#[repr(C)] pub struct btree_txn { _private: [u8; 0] }
#[repr(C)] pub struct cursor { _private: [u8; 0] }
#[repr(C)] pub struct mpage { _private: [u8; 0] }

#[repr(C)]
pub struct btval {
    pub data: *mut ::libc::c_void,
    pub size: ::libc::size_t,
    pub free_data: ::libc::c_int,
    pub mp: *mut mpage,
}

pub type bt_cmp_func = extern "C" fn(a: *const btval, b: *const btval)
    -> ::libc::c_int;

pub type bt_prefix_func = extern "C" fn(a: *const btval, b: *const btval,
    sep: *mut btval);

pub type cursor_op = ::libc::c_uint;
pub const BT_CURSOR: cursor_op = 0;
pub const BT_CURSOR_EXACT: cursor_op = 1;
pub const BT_FIRST: cursor_op = 2;
pub const BT_NEXT: cursor_op = 3;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btree_stat {
    pub hits: ::libc::c_ulonglong,
    pub reads: ::libc::c_ulonglong,
    pub max_cache: ::libc::c_uint,
    pub cache_size: ::libc::c_uint,
    pub branch_pages: ::libc::c_uint,
    pub leaf_pages: ::libc::c_uint,
    pub overflow_pages: ::libc::c_uint,
    pub revisions: ::libc::c_uint,
    pub depth: ::libc::c_uint,
    pub entries: ::libc::c_ulonglong,
    pub psize: ::libc::c_uint,
    pub created_at: ::libc::time_t,
}

extern "C" {
    pub fn btree_open_fd(fd: ::libc::c_int, flags: ::libc::c_uint)
        -> *mut btree;
    pub fn btree_open(path: *const ::libc::c_char, flags: ::libc::c_uint,
        mode: ::libc::mode_t) -> *mut btree;
    pub fn btree_close(bt: *mut btree);
    pub fn btree_stat(bt: *mut btree) -> *const btree_stat;
    pub fn btree_txn_begin(bt: *mut btree, rdonly: ::libc::c_int)
        -> *mut btree_txn;
    pub fn btree_txn_commit(txn: *mut btree_txn) -> ::libc::c_int;
    pub fn btree_txn_abort(txn: *mut btree_txn);
    pub fn btree_txn_get(bt: *mut btree, txn: *mut btree_txn,
        key: *mut btval, data: *mut btval) -> ::libc::c_int;
    pub fn btree_txn_put(bt: *mut btree, txn: *mut btree_txn,
        key: *mut btval, data: *mut btval, flags: ::libc::c_uint)
        -> ::libc::c_int;
    pub fn btree_txn_del(bt: *mut btree, txn: *mut btree_txn,
        key: *mut btval, data: *mut btval) -> ::libc::c_int;
    pub fn btree_set_cache_size(bt: *mut btree, cache_size: ::libc::c_uint);
    pub fn btree_get_flags(bt: *mut btree) -> ::libc::c_uint;
    pub fn btree_get_path(bt: *mut btree) -> *const ::libc::c_char;
    pub fn btree_txn_cursor_open(bt: *mut btree, txn: *mut btree_txn)
        -> *mut cursor;
    pub fn btree_cursor_close(cursor: *mut cursor);
    pub fn btree_cursor_get(cursor: *mut cursor, key: *mut btval,
        data: *mut btval, op: cursor_op) -> ::libc::c_int;
    pub fn btree_sync(bt: *mut btree) -> ::libc::c_int;
    pub fn btree_compact(bt: *mut btree) -> ::libc::c_int;
    pub fn btree_revert(bt: *mut btree) -> ::libc::c_int;
    pub fn btree_cmp(bt: *mut btree, a: *const btval, b: *const btval)
        -> ::libc::c_int;
    pub fn btval_reset(btv: *mut btval);
}
